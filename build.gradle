buildscript {
	repositories {
		mavenLocal()
		maven {
			url = 'https://maven.minecraftforge.net'
		}
		maven {
			url = 'https://repo.spongepowered.org/repository/maven-public/'
		}
		mavenCentral()
	}
	dependencies {
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}
plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0.14,6.2)'
}
apply plugin: 'org.spongepowered.mixin'
def mixin_config_file = "${mod_id}.mixin.json"
def mixin_refmap_file = "${mod_id}.refmap.json"
base {
	archivesName = "${mod_id}-${minecraft_version}-forge-${forge_version}-${mod_version}"
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
mixin {
	add sourceSets.main, "${mixin_refmap_file}"
	println "Mixin config file: ${mixin_config_file}"
}
minecraft {
	mappings channel: mapping_channel, version: mapping_version
	copyIdeResources = true
	runs {
		configureEach {
			workingDirectory project.file('run')
			arg "-mixin.config=${mixin_config_file}"
			property 'forge.logging.console.level', 'debug'
			property 'forge.logging.markers', 'REGISTRIES'
			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
		client {
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}
		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		data {
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}
sourceSets.main.resources {
	srcDir 'src/generated/resources'
}
repositories {
	mavenLocal()
	maven {
		url 'https://maven.aliyun.com/repository/public'
	}
	maven {
		url 'https://maven.aliyun.com/repository/google'
	}
}
dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
						 forge_version       : forge_version, forge_version_range: forge_version_range,
						 loader_version_range: loader_version_range,
						 mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
						 mod_authors         : mod_authors, mod_description: mod_description]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project
	filesMatching(resourceTargets) {
		expand replaceProperties
	}
	def buildProps = project.properties.clone()
	buildProps.put('file', [jarVersion: project.version])
	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand buildProps
	}
	filesMatching([mixin_config_file.toString()]) {
		expand buildProps
	}
}
jar {
	manifest {
		attributes(["Specification-Title"     : mod_id,
					"Specification-Vendor"    : mod_authors,
					"Specification-Version"   : "1",
					"Implementation-Title"    : project.name,
					"Implementation-Version"  : project.jar.archiveVersion,
					"Implementation-Vendor"   : mod_authors,
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					"MixinConfigs"            : mixin_config_file])
	}
}
jar.finalizedBy('reobfJar')
publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}
tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
