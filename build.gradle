plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
}
architectury {
	minecraft = rootProject.minecraft_version
}
subprojects {
	apply plugin: "dev.architectury.loom"
	loom {
		silentMojangMappingsLicense()
	}
	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		// The following line declares the mojmap mappings, you may use other mappings as well
		mappings loom.officialMojangMappings()
		// The following line declares the yarn mappings you may select this one as well.
		// mappings "net.fabricmc:yarn:1.20.1+build.10:v2"
	}
}
// 生成文件名格式
def archiveFileNameOfPlatform(String platform){
	switch(platform) {
		case "forge":
			return "$mod_name-v$mod_version-mc$minecraft_version-forge";
		case "fabric":
			return "$mod_name-v$mod_version-mc$minecraft_version-fabric";
		default:
			throw new IllegalArgumentException("Unknown platform: $platform");
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"
	base {
		archivesName = rootProject.mod_id
	}
	version = rootProject.mod_version
	group = rootProject.mod_group_id
	repositories {
		mavenLocal()
		
		mavenCentral()
		maven { url 'https://maven.aliyun.com/repository/public' }
		maven { url 'https://maven.aliyun.com/repository/google' }
		
		// YACL
		maven { url "https://maven.isxander.dev/releases" }
		maven { url "https://maven.terraformersmc.com/releases" }
		maven { url "https://maven.quiltmc.org/repository/release" }
		maven { url "https://jitpack.io" }
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
		
	}
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release = 17
	}
	java {
		withSourcesJar()
	}
	tasks.withType(Jar).configureEach {
		setDuplicatesStrategy DuplicatesStrategy.INCLUDE
		from rootProject.file("LICENSE.txt")
	}
}
